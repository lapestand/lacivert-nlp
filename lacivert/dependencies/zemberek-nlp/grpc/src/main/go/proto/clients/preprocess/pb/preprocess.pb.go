// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.0
// source: preprocess.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TokenizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input                  string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	IncludeTokenBoundaries bool   `protobuf:"varint,2,opt,name=includeTokenBoundaries,proto3" json:"includeTokenBoundaries,omitempty"`
	IgnoreDoubleQuotes     bool   `protobuf:"varint,3,opt,name=ignoreDoubleQuotes,proto3" json:"ignoreDoubleQuotes,omitempty"` // TODO: Add options (ignore etc.)
}

func (x *TokenizationRequest) Reset() {
	*x = TokenizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preprocess_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenizationRequest) ProtoMessage() {}

func (x *TokenizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_preprocess_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenizationRequest.ProtoReflect.Descriptor instead.
func (*TokenizationRequest) Descriptor() ([]byte, []int) {
	return file_preprocess_proto_rawDescGZIP(), []int{0}
}

func (x *TokenizationRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TokenizationRequest) GetIncludeTokenBoundaries() bool {
	if x != nil {
		return x.IncludeTokenBoundaries
	}
	return false
}

func (x *TokenizationRequest) GetIgnoreDoubleQuotes() bool {
	if x != nil {
		return x.IgnoreDoubleQuotes
	}
	return false
}

type TokenProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// TODO: Types should be enums.
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Start int32  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End   int32  `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TokenProto) Reset() {
	*x = TokenProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preprocess_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenProto) ProtoMessage() {}

func (x *TokenProto) ProtoReflect() protoreflect.Message {
	mi := &file_preprocess_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenProto.ProtoReflect.Descriptor instead.
func (*TokenProto) Descriptor() ([]byte, []int) {
	return file_preprocess_proto_rawDescGZIP(), []int{1}
}

func (x *TokenProto) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenProto) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TokenProto) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TokenProto) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type TokenizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*TokenProto `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *TokenizationResponse) Reset() {
	*x = TokenizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preprocess_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenizationResponse) ProtoMessage() {}

func (x *TokenizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_preprocess_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenizationResponse.ProtoReflect.Descriptor instead.
func (*TokenizationResponse) Descriptor() ([]byte, []int) {
	return file_preprocess_proto_rawDescGZIP(), []int{2}
}

func (x *TokenizationResponse) GetTokens() []*TokenProto {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type SentenceExtractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document                 string `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	DoNotSplitInDoubleQuotes bool   `protobuf:"varint,2,opt,name=doNotSplitInDoubleQuotes,proto3" json:"doNotSplitInDoubleQuotes,omitempty"`
}

func (x *SentenceExtractionRequest) Reset() {
	*x = SentenceExtractionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preprocess_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceExtractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceExtractionRequest) ProtoMessage() {}

func (x *SentenceExtractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_preprocess_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceExtractionRequest.ProtoReflect.Descriptor instead.
func (*SentenceExtractionRequest) Descriptor() ([]byte, []int) {
	return file_preprocess_proto_rawDescGZIP(), []int{3}
}

func (x *SentenceExtractionRequest) GetDocument() string {
	if x != nil {
		return x.Document
	}
	return ""
}

func (x *SentenceExtractionRequest) GetDoNotSplitInDoubleQuotes() bool {
	if x != nil {
		return x.DoNotSplitInDoubleQuotes
	}
	return false
}

type SentenceExtractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentences []string `protobuf:"bytes,1,rep,name=sentences,proto3" json:"sentences,omitempty"`
}

func (x *SentenceExtractionResponse) Reset() {
	*x = SentenceExtractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preprocess_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceExtractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceExtractionResponse) ProtoMessage() {}

func (x *SentenceExtractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_preprocess_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceExtractionResponse.ProtoReflect.Descriptor instead.
func (*SentenceExtractionResponse) Descriptor() ([]byte, []int) {
	return file_preprocess_proto_rawDescGZIP(), []int{4}
}

func (x *SentenceExtractionResponse) GetSentences() []string {
	if x != nil {
		return x.Sentences
	}
	return nil
}

var File_preprocess_proto protoreflect.FileDescriptor

var file_preprocess_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x5e, 0x0a, 0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22,
	0x51, 0x0a, 0x14, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x22, 0x73, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x64,
	0x6f, 0x4e, 0x6f, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64,
	0x6f, 0x4e, 0x6f, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x32, 0xf4, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x08,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e,
	0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x77, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b,
	0x2e, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x12, 0x0a, 0x0e, 0x7a, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_preprocess_proto_rawDescOnce sync.Once
	file_preprocess_proto_rawDescData = file_preprocess_proto_rawDesc
)

func file_preprocess_proto_rawDescGZIP() []byte {
	file_preprocess_proto_rawDescOnce.Do(func() {
		file_preprocess_proto_rawDescData = protoimpl.X.CompressGZIP(file_preprocess_proto_rawDescData)
	})
	return file_preprocess_proto_rawDescData
}

var file_preprocess_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_preprocess_proto_goTypes = []interface{}{
	(*TokenizationRequest)(nil),        // 0: zemberek.preprocessor.TokenizationRequest
	(*TokenProto)(nil),                 // 1: zemberek.preprocessor.TokenProto
	(*TokenizationResponse)(nil),       // 2: zemberek.preprocessor.TokenizationResponse
	(*SentenceExtractionRequest)(nil),  // 3: zemberek.preprocessor.SentenceExtractionRequest
	(*SentenceExtractionResponse)(nil), // 4: zemberek.preprocessor.SentenceExtractionResponse
}
var file_preprocess_proto_depIdxs = []int32{
	1, // 0: zemberek.preprocessor.TokenizationResponse.tokens:type_name -> zemberek.preprocessor.TokenProto
	0, // 1: zemberek.preprocessor.PreprocessingService.Tokenize:input_type -> zemberek.preprocessor.TokenizationRequest
	3, // 2: zemberek.preprocessor.PreprocessingService.ExtractSentences:input_type -> zemberek.preprocessor.SentenceExtractionRequest
	2, // 3: zemberek.preprocessor.PreprocessingService.Tokenize:output_type -> zemberek.preprocessor.TokenizationResponse
	4, // 4: zemberek.preprocessor.PreprocessingService.ExtractSentences:output_type -> zemberek.preprocessor.SentenceExtractionResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_preprocess_proto_init() }
func file_preprocess_proto_init() {
	if File_preprocess_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_preprocess_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preprocess_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preprocess_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preprocess_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceExtractionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preprocess_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceExtractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_preprocess_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_preprocess_proto_goTypes,
		DependencyIndexes: file_preprocess_proto_depIdxs,
		MessageInfos:      file_preprocess_proto_msgTypes,
	}.Build()
	File_preprocess_proto = out.File
	file_preprocess_proto_rawDesc = nil
	file_preprocess_proto_goTypes = nil
	file_preprocess_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PreprocessingServiceClient is the client API for PreprocessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PreprocessingServiceClient interface {
	Tokenize(ctx context.Context, in *TokenizationRequest, opts ...grpc.CallOption) (*TokenizationResponse, error)
	ExtractSentences(ctx context.Context, in *SentenceExtractionRequest, opts ...grpc.CallOption) (*SentenceExtractionResponse, error)
}

type preprocessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPreprocessingServiceClient(cc grpc.ClientConnInterface) PreprocessingServiceClient {
	return &preprocessingServiceClient{cc}
}

func (c *preprocessingServiceClient) Tokenize(ctx context.Context, in *TokenizationRequest, opts ...grpc.CallOption) (*TokenizationResponse, error) {
	out := new(TokenizationResponse)
	err := c.cc.Invoke(ctx, "/zemberek.preprocessor.PreprocessingService/Tokenize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprocessingServiceClient) ExtractSentences(ctx context.Context, in *SentenceExtractionRequest, opts ...grpc.CallOption) (*SentenceExtractionResponse, error) {
	out := new(SentenceExtractionResponse)
	err := c.cc.Invoke(ctx, "/zemberek.preprocessor.PreprocessingService/ExtractSentences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreprocessingServiceServer is the server API for PreprocessingService service.
type PreprocessingServiceServer interface {
	Tokenize(context.Context, *TokenizationRequest) (*TokenizationResponse, error)
	ExtractSentences(context.Context, *SentenceExtractionRequest) (*SentenceExtractionResponse, error)
}

// UnimplementedPreprocessingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPreprocessingServiceServer struct {
}

func (*UnimplementedPreprocessingServiceServer) Tokenize(context.Context, *TokenizationRequest) (*TokenizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokenize not implemented")
}
func (*UnimplementedPreprocessingServiceServer) ExtractSentences(context.Context, *SentenceExtractionRequest) (*SentenceExtractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractSentences not implemented")
}

func RegisterPreprocessingServiceServer(s *grpc.Server, srv PreprocessingServiceServer) {
	s.RegisterService(&_PreprocessingService_serviceDesc, srv)
}

func _PreprocessingService_Tokenize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessingServiceServer).Tokenize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zemberek.preprocessor.PreprocessingService/Tokenize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessingServiceServer).Tokenize(ctx, req.(*TokenizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreprocessingService_ExtractSentences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentenceExtractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessingServiceServer).ExtractSentences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zemberek.preprocessor.PreprocessingService/ExtractSentences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessingServiceServer).ExtractSentences(ctx, req.(*SentenceExtractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PreprocessingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zemberek.preprocessor.PreprocessingService",
	HandlerType: (*PreprocessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tokenize",
			Handler:    _PreprocessingService_Tokenize_Handler,
		},
		{
			MethodName: "ExtractSentences",
			Handler:    _PreprocessingService_ExtractSentences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "preprocess.proto",
}
