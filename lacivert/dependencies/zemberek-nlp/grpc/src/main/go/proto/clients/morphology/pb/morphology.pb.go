// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.0
// source: morphology.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Morphological analysis request for a single word.
type WordAnalysisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *WordAnalysisRequest) Reset() {
	*x = WordAnalysisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordAnalysisRequest) ProtoMessage() {}

func (x *WordAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_morphology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordAnalysisRequest.ProtoReflect.Descriptor instead.
func (*WordAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_morphology_proto_rawDescGZIP(), []int{0}
}

func (x *WordAnalysisRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

// A dictionary item. Lemma and pos values are provided.
// TODO: POS values should be enums.
type DictionaryItemProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lemma        string `protobuf:"bytes,1,opt,name=lemma,proto3" json:"lemma,omitempty"`
	PrimaryPos   string `protobuf:"bytes,2,opt,name=primaryPos,proto3" json:"primaryPos,omitempty"`
	SecondaryPos string `protobuf:"bytes,3,opt,name=secondaryPos,proto3" json:"secondaryPos,omitempty"`
}

func (x *DictionaryItemProto) Reset() {
	*x = DictionaryItemProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionaryItemProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryItemProto) ProtoMessage() {}

func (x *DictionaryItemProto) ProtoReflect() protoreflect.Message {
	mi := &file_morphology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryItemProto.ProtoReflect.Descriptor instead.
func (*DictionaryItemProto) Descriptor() ([]byte, []int) {
	return file_morphology_proto_rawDescGZIP(), []int{1}
}

func (x *DictionaryItemProto) GetLemma() string {
	if x != nil {
		return x.Lemma
	}
	return ""
}

func (x *DictionaryItemProto) GetPrimaryPos() string {
	if x != nil {
		return x.PrimaryPos
	}
	return ""
}

func (x *DictionaryItemProto) GetSecondaryPos() string {
	if x != nil {
		return x.SecondaryPos
	}
	return ""
}

// represents a single morphological analysis result.
type SingleAnalysisProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the POS of the whole word.
	Pos string `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	// root word's dictionary information (contains lemma and pos values.)
	DictionaryItem *DictionaryItemProto `protobuf:"bytes,2,opt,name=dictionaryItem,proto3" json:"dictionaryItem,omitempty"`
	// This is the long formatted analysis string.
	Analysis string `protobuf:"bytes,3,opt,name=analysis,proto3" json:"analysis,omitempty"`
	// [true] if this analysis contain informal morphemes.
	Informal bool `protobuf:"varint,4,opt,name=informal,proto3" json:"informal,omitempty"`
	// [true] if this root form of the input does not exist in dictionary.
	Runtime bool `protobuf:"varint,5,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// all lemma values. Such as for input "kapattırdım" -> ["kapat","kapattır"]
	Lemmas []string `protobuf:"bytes,6,rep,name=lemmas,proto3" json:"lemmas,omitempty"`
	// all morpheme information.
	Morphemes []*MorphemeDataProto `protobuf:"bytes,7,rep,name=morphemes,proto3" json:"morphemes,omitempty"`
}

func (x *SingleAnalysisProto) Reset() {
	*x = SingleAnalysisProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAnalysisProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAnalysisProto) ProtoMessage() {}

func (x *SingleAnalysisProto) ProtoReflect() protoreflect.Message {
	mi := &file_morphology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAnalysisProto.ProtoReflect.Descriptor instead.
func (*SingleAnalysisProto) Descriptor() ([]byte, []int) {
	return file_morphology_proto_rawDescGZIP(), []int{2}
}

func (x *SingleAnalysisProto) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

func (x *SingleAnalysisProto) GetDictionaryItem() *DictionaryItemProto {
	if x != nil {
		return x.DictionaryItem
	}
	return nil
}

func (x *SingleAnalysisProto) GetAnalysis() string {
	if x != nil {
		return x.Analysis
	}
	return ""
}

func (x *SingleAnalysisProto) GetInformal() bool {
	if x != nil {
		return x.Informal
	}
	return false
}

func (x *SingleAnalysisProto) GetRuntime() bool {
	if x != nil {
		return x.Runtime
	}
	return false
}

func (x *SingleAnalysisProto) GetLemmas() []string {
	if x != nil {
		return x.Lemmas
	}
	return nil
}

func (x *SingleAnalysisProto) GetMorphemes() []*MorphemeDataProto {
	if x != nil {
		return x.Morphemes
	}
	return nil
}

// Contains surface form and id of the morpheme.
// Like surface = "acak", morpheme = Fut
type MorphemeDataProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Surface  string `protobuf:"bytes,1,opt,name=surface,proto3" json:"surface,omitempty"`
	Morpheme string `protobuf:"bytes,2,opt,name=morpheme,proto3" json:"morpheme,omitempty"`
}

func (x *MorphemeDataProto) Reset() {
	*x = MorphemeDataProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MorphemeDataProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MorphemeDataProto) ProtoMessage() {}

func (x *MorphemeDataProto) ProtoReflect() protoreflect.Message {
	mi := &file_morphology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MorphemeDataProto.ProtoReflect.Descriptor instead.
func (*MorphemeDataProto) Descriptor() ([]byte, []int) {
	return file_morphology_proto_rawDescGZIP(), []int{3}
}

func (x *MorphemeDataProto) GetSurface() string {
	if x != nil {
		return x.Surface
	}
	return ""
}

func (x *MorphemeDataProto) GetMorpheme() string {
	if x != nil {
		return x.Morpheme
	}
	return ""
}

// Contains all analyses of a word.
type WordAnalysisProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// input word.
	Input    string                 `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Analyses []*SingleAnalysisProto `protobuf:"bytes,2,rep,name=analyses,proto3" json:"analyses,omitempty"`
}

func (x *WordAnalysisProto) Reset() {
	*x = WordAnalysisProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordAnalysisProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordAnalysisProto) ProtoMessage() {}

func (x *WordAnalysisProto) ProtoReflect() protoreflect.Message {
	mi := &file_morphology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordAnalysisProto.ProtoReflect.Descriptor instead.
func (*WordAnalysisProto) Descriptor() ([]byte, []int) {
	return file_morphology_proto_rawDescGZIP(), []int{4}
}

func (x *WordAnalysisProto) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *WordAnalysisProto) GetAnalyses() []*SingleAnalysisProto {
	if x != nil {
		return x.Analyses
	}
	return nil
}

// Sentence analysis request.
type SentenceAnalysisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sentence string
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// if [true], all analyses of all tokens will be included in the response
	// else, only the best analysis will be used.
	ContainAllAnalyses bool `protobuf:"varint,2,opt,name=containAllAnalyses,proto3" json:"containAllAnalyses,omitempty"`
}

func (x *SentenceAnalysisRequest) Reset() {
	*x = SentenceAnalysisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceAnalysisRequest) ProtoMessage() {}

func (x *SentenceAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_morphology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceAnalysisRequest.ProtoReflect.Descriptor instead.
func (*SentenceAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_morphology_proto_rawDescGZIP(), []int{5}
}

func (x *SentenceAnalysisRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *SentenceAnalysisRequest) GetContainAllAnalyses() bool {
	if x != nil {
		return x.ContainAllAnalyses
	}
	return false
}

type SentenceAnalysisProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// input sentence
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// for each token, result best morphological analysis and if requested, all
	// analyses.
	Results []*SentenceWordAnalysisProto `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SentenceAnalysisProto) Reset() {
	*x = SentenceAnalysisProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceAnalysisProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceAnalysisProto) ProtoMessage() {}

func (x *SentenceAnalysisProto) ProtoReflect() protoreflect.Message {
	mi := &file_morphology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceAnalysisProto.ProtoReflect.Descriptor instead.
func (*SentenceAnalysisProto) Descriptor() ([]byte, []int) {
	return file_morphology_proto_rawDescGZIP(), []int{6}
}

func (x *SentenceAnalysisProto) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *SentenceAnalysisProto) GetResults() []*SentenceWordAnalysisProto {
	if x != nil {
		return x.Results
	}
	return nil
}

// After disambiguation, a SentenceWordAnalysis_P object per use is used.
type SentenceWordAnalysisProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string               `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Best  *SingleAnalysisProto `protobuf:"bytes,2,opt,name=best,proto3" json:"best,omitempty"`
	All   *WordAnalysisProto   `protobuf:"bytes,3,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *SentenceWordAnalysisProto) Reset() {
	*x = SentenceWordAnalysisProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_morphology_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceWordAnalysisProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceWordAnalysisProto) ProtoMessage() {}

func (x *SentenceWordAnalysisProto) ProtoReflect() protoreflect.Message {
	mi := &file_morphology_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceWordAnalysisProto.ProtoReflect.Descriptor instead.
func (*SentenceWordAnalysisProto) Descriptor() ([]byte, []int) {
	return file_morphology_proto_rawDescGZIP(), []int{7}
}

func (x *SentenceWordAnalysisProto) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SentenceWordAnalysisProto) GetBest() *SingleAnalysisProto {
	if x != nil {
		return x.Best
	}
	return nil
}

func (x *SentenceWordAnalysisProto) GetAll() *WordAnalysisProto {
	if x != nil {
		return x.All
	}
	return nil
}

var File_morphology_proto protoreflect.FileDescriptor

var file_morphology_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e, 0x6d, 0x6f, 0x72,
	0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x22, 0x2b, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x64, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x6f, 0x0a, 0x13, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x6d, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x6d, 0x6d,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6f,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x50, 0x6f, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x50, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x6b, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6d, 0x6d, 0x61, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x6d, 0x6d, 0x61, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x6d,
	0x6f, 0x72, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x22, 0x49, 0x0a, 0x11, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x11,
	0x57, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x6b, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73, 0x22, 0x5f, 0x0a,
	0x17, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73, 0x22, 0x77,
	0x0a, 0x15, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x48, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72,
	0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x62,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x6b, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x62, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x6b, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x57, 0x6f, 0x72,
	0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03,
	0x61, 0x6c, 0x6c, 0x32, 0xe1, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x7a,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5f, 0x0a, 0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b,
	0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x64,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1d, 0x0a, 0x19, 0x7a, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_morphology_proto_rawDescOnce sync.Once
	file_morphology_proto_rawDescData = file_morphology_proto_rawDesc
)

func file_morphology_proto_rawDescGZIP() []byte {
	file_morphology_proto_rawDescOnce.Do(func() {
		file_morphology_proto_rawDescData = protoimpl.X.CompressGZIP(file_morphology_proto_rawDescData)
	})
	return file_morphology_proto_rawDescData
}

var file_morphology_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_morphology_proto_goTypes = []interface{}{
	(*WordAnalysisRequest)(nil),       // 0: zemberek.morphology.WordAnalysisRequest
	(*DictionaryItemProto)(nil),       // 1: zemberek.morphology.DictionaryItemProto
	(*SingleAnalysisProto)(nil),       // 2: zemberek.morphology.SingleAnalysisProto
	(*MorphemeDataProto)(nil),         // 3: zemberek.morphology.MorphemeDataProto
	(*WordAnalysisProto)(nil),         // 4: zemberek.morphology.WordAnalysisProto
	(*SentenceAnalysisRequest)(nil),   // 5: zemberek.morphology.SentenceAnalysisRequest
	(*SentenceAnalysisProto)(nil),     // 6: zemberek.morphology.SentenceAnalysisProto
	(*SentenceWordAnalysisProto)(nil), // 7: zemberek.morphology.SentenceWordAnalysisProto
}
var file_morphology_proto_depIdxs = []int32{
	1, // 0: zemberek.morphology.SingleAnalysisProto.dictionaryItem:type_name -> zemberek.morphology.DictionaryItemProto
	3, // 1: zemberek.morphology.SingleAnalysisProto.morphemes:type_name -> zemberek.morphology.MorphemeDataProto
	2, // 2: zemberek.morphology.WordAnalysisProto.analyses:type_name -> zemberek.morphology.SingleAnalysisProto
	7, // 3: zemberek.morphology.SentenceAnalysisProto.results:type_name -> zemberek.morphology.SentenceWordAnalysisProto
	2, // 4: zemberek.morphology.SentenceWordAnalysisProto.best:type_name -> zemberek.morphology.SingleAnalysisProto
	4, // 5: zemberek.morphology.SentenceWordAnalysisProto.all:type_name -> zemberek.morphology.WordAnalysisProto
	5, // 6: zemberek.morphology.MorphologyService.AnalyzeSentence:input_type -> zemberek.morphology.SentenceAnalysisRequest
	0, // 7: zemberek.morphology.MorphologyService.AnalyzeWord:input_type -> zemberek.morphology.WordAnalysisRequest
	6, // 8: zemberek.morphology.MorphologyService.AnalyzeSentence:output_type -> zemberek.morphology.SentenceAnalysisProto
	4, // 9: zemberek.morphology.MorphologyService.AnalyzeWord:output_type -> zemberek.morphology.WordAnalysisProto
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_morphology_proto_init() }
func file_morphology_proto_init() {
	if File_morphology_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_morphology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordAnalysisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionaryItemProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAnalysisProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MorphemeDataProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordAnalysisProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceAnalysisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceAnalysisProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_morphology_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceWordAnalysisProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_morphology_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_morphology_proto_goTypes,
		DependencyIndexes: file_morphology_proto_depIdxs,
		MessageInfos:      file_morphology_proto_msgTypes,
	}.Build()
	File_morphology_proto = out.File
	file_morphology_proto_rawDesc = nil
	file_morphology_proto_goTypes = nil
	file_morphology_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MorphologyServiceClient is the client API for MorphologyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MorphologyServiceClient interface {
	AnalyzeSentence(ctx context.Context, in *SentenceAnalysisRequest, opts ...grpc.CallOption) (*SentenceAnalysisProto, error)
	AnalyzeWord(ctx context.Context, in *WordAnalysisRequest, opts ...grpc.CallOption) (*WordAnalysisProto, error)
}

type morphologyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMorphologyServiceClient(cc grpc.ClientConnInterface) MorphologyServiceClient {
	return &morphologyServiceClient{cc}
}

func (c *morphologyServiceClient) AnalyzeSentence(ctx context.Context, in *SentenceAnalysisRequest, opts ...grpc.CallOption) (*SentenceAnalysisProto, error) {
	out := new(SentenceAnalysisProto)
	err := c.cc.Invoke(ctx, "/zemberek.morphology.MorphologyService/AnalyzeSentence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *morphologyServiceClient) AnalyzeWord(ctx context.Context, in *WordAnalysisRequest, opts ...grpc.CallOption) (*WordAnalysisProto, error) {
	out := new(WordAnalysisProto)
	err := c.cc.Invoke(ctx, "/zemberek.morphology.MorphologyService/AnalyzeWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MorphologyServiceServer is the server API for MorphologyService service.
type MorphologyServiceServer interface {
	AnalyzeSentence(context.Context, *SentenceAnalysisRequest) (*SentenceAnalysisProto, error)
	AnalyzeWord(context.Context, *WordAnalysisRequest) (*WordAnalysisProto, error)
}

// UnimplementedMorphologyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMorphologyServiceServer struct {
}

func (*UnimplementedMorphologyServiceServer) AnalyzeSentence(context.Context, *SentenceAnalysisRequest) (*SentenceAnalysisProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeSentence not implemented")
}
func (*UnimplementedMorphologyServiceServer) AnalyzeWord(context.Context, *WordAnalysisRequest) (*WordAnalysisProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeWord not implemented")
}

func RegisterMorphologyServiceServer(s *grpc.Server, srv MorphologyServiceServer) {
	s.RegisterService(&_MorphologyService_serviceDesc, srv)
}

func _MorphologyService_AnalyzeSentence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentenceAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MorphologyServiceServer).AnalyzeSentence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zemberek.morphology.MorphologyService/AnalyzeSentence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MorphologyServiceServer).AnalyzeSentence(ctx, req.(*SentenceAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MorphologyService_AnalyzeWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MorphologyServiceServer).AnalyzeWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zemberek.morphology.MorphologyService/AnalyzeWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MorphologyServiceServer).AnalyzeWord(ctx, req.(*WordAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MorphologyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zemberek.morphology.MorphologyService",
	HandlerType: (*MorphologyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeSentence",
			Handler:    _MorphologyService_AnalyzeSentence_Handler,
		},
		{
			MethodName: "AnalyzeWord",
			Handler:    _MorphologyService_AnalyzeWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "morphology.proto",
}
